#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <sys/neutrino.h>
#include <stdlib.h>
#include "fifo.h"
#include <process.h>
#include"IPC.h"

void *send(void *data) {
	int serverPID = 0, chid = 0; 	// Server PID and channel ID

	serverPID = getpid(); 		// get server process ID

	printf("%i\n", serverPID);

	// Create Channel
		chid = ChannelCreate(_NTO_CHF_DISCONNECT);
		printf("%i\n",chid);
		Write_Server_INFO(serverPID,chid);
		my_data msg;
		int rcvid=0, msgnum=0;  	// no message received yet
		int Stay_alive=1, living=0;	// server stays running (ignores _PULSE_CODE_DISCONNECT request)

		my_reply replymsg; 			// replymsg structure for sending back to client
		replymsg.hdr.type = 0x01;
		replymsg.hdr.subtype = 0x00;

		living =1;
			while (living)
			{
				printf("## send terminating...\n");
				 // Do your MsgReceive's here now with the chid
				 rcvid = MsgReceive(chid, &msg, sizeof(msg), NULL);
				 printf("%d",rcvid);
				 if (rcvid == -1)  // Error condition, exit
					   {
						   printf("\nFailed to MsgReceive\n");
						   break;
					   }

				 if (rcvid == 0)  //  Pulse received, work out what type
					   {
						   switch (msg.hdr.code)
						   {
							   case _PULSE_CODE_DISCONNECT:
									// A client disconnected all its connections by running
									// name_close() for each name_open()  or terminated
								   if( Stay_alive == 0)
								   {
									   ConnectDetach(msg.hdr.scoid);
									   printf("\nServer was told to Detach from ClientID:%d ...\n", msg.ClientID);
									   living = 0; // kill while loop
									   continue;
								   }
								   else
								   {
									   printf("\nServer received Detach pulse from ClientID:%d but rejected it ...\n", msg.ClientID);
								   }
								   break;

							   case _PULSE_CODE_UNBLOCK:
									// REPLY blocked client wants to unblock (was hit by a signal
									// or timed out).  It's up to you if you reply now or later.
								   printf("\nServer got _PULSE_CODE_UNBLOCK after %d, msgnum\n", msgnum);
								   break;

							   case _PULSE_CODE_COIDDEATH:  // from the kernel
								   printf("\nServer got _PULSE_CODE_COIDDEATH after %d, msgnum\n", msgnum);
								   break;

							   case _PULSE_CODE_THREADDEATH: // from the kernel
								   printf("\nServer got _PULSE_CODE_THREADDEATH after %d, msgnum\n", msgnum);
								   break;

							   default:
								   // Some other pulse sent by one of your processes or the kernel
								   printf("\nServer got some other pulse after %d, msgnum\n", msgnum);
								   break;

						   }
						   continue;// go back to top of while loop
					   }


			}


	return NULL;
}




